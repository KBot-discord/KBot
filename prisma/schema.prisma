datasource database {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  output          = "./generated"
  previewFeatures = ["tracing"]
}

enum ModerationActionType {
  UNDEFINED
  BAN
  KICK
  MUTE
  TIMEOUT
  UNBAN
  UNMUTE
  UNTIMEOUT
}

model EventUser {
  id          String   @id @unique
  name        String
  partnerId   String?  @unique
  partnerName String?
  createdAt   DateTime @default(now())
  eventId     String   @unique
  event       Event    @relation(fields: [eventId], references: [guildId], onDelete: Cascade)

  @@unique([id, eventId])
}

model Event {
  id             String        @id @unique
  textChannelId  String
  locked         Boolean
  isActive       Boolean
  pinMessageId   String?
  discordEventId String?
  roleId         String?
  queue          EventUser[]
  guildId        String        @unique
  eventSettings  EventSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model EventSettings {
  guildId      String       @id @unique
  enabled      Boolean      @default(false)
  events       Event[]
  coreSettings CoreSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model Mute {
  id                 String             @default(uuid()) @database.Uuid
  userId             String
  duration           BigInt?
  evadeTime          BigInt?
  guildId            String
  moderationSettings ModerationSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  @@id([id])
  @@unique([userId, guildId])
}

model LockedChannel {
  id                 String             @id @unique
  roleId             String
  duration           BigInt?
  guildId            String             @unique
  moderationSettings ModerationSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model ModerationSettings {
  guildId              String          @id @unique
  enabled              Boolean         @default(false)
  logChannelId         String?
  reportChannelId      String?
  muteRoleId           String?
  minAccountAgeEnabled Boolean         @default(false)
  minAccountAgeReq     Int?
  minAccountAgeMsg     String?
  antiHoistEnabled     Boolean         @default(false)
  mutes                Mute[]
  lockedChannels       LockedChannel[]
  coreSettings         CoreSettings    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model TwitchAccount {
  id                   String               @id @unique
  name                 String
  image                String
  twitchSubscriptionId String
  subscriptions        TwitchSubscription[]
}

model TwitchSubscription {
  id                   String               @default(uuid()) @database.Uuid
  message              String?
  roleId               String?
  discordChannelId     String?
  accountId            String
  account              TwitchAccount        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  guildId              String               @unique
  notificationSettings NotificationSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  @@id([id])
  @@unique([guildId, accountId])
}

model NotificationSettings {
  guildId      String               @id @unique
  enabled      Boolean              @default(false)
  twitch       TwitchSubscription[]
  coreSettings CoreSettings         @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model PollUser {
  id     String @unique
  option Int
  pollId String @unique
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@id([id, pollId])
}

model Poll {
  id              String          @id @unique
  title           String
  channelId       String
  time            BigInt?
  options         String[]
  createdAt       DateTime        @default(now())
  users           PollUser[]
  guildId         String          @unique
  utilitySettings UtilitySettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model UtilitySettings {
  guildId           String       @id @unique
  enabled           Boolean      @default(false)
  incidentChannelId String?      @unique
  creditsChannelId  String?
  polls             Poll[]
  coreSettings      CoreSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model WelcomeSettings {
  guildId      String       @id @unique
  enabled      Boolean      @default(false)
  channelId    String?
  message      String?
  title        String?
  description  String?
  image        String?
  color        String?
  coreSettings CoreSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model CoreSettings {
  guildId               String                @id @unique
  staffRoles            String[]
  botManagers           String[]
  eventSettings         EventSettings?
  moderationSettings    ModerationSettings?
  notificationsSettings NotificationSettings?
  utilitySettings       UtilitySettings?
  welcomeSettings       WelcomeSettings?
}

model ModerationCase {
  id           String               @default(uuid()) @database.Uuid
  caseId       Int
  guildId      String
  userId       String
  userTag      String
  moderatorId  String
  moderatorTag String
  type         ModerationActionType
  reason       String               @default("No reason provided.")
  duration     BigInt?

  @@id([id])
  @@unique([caseId, guildId])
}

model IncidentMessage {
  id         String          @unique
  channelId  String
  guildId    String
  incidentId String          @unique
  incident   DiscordIncident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
}

model DiscordIncident {
  id        String            @id @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  resolved  Boolean
  messages  IncidentMessage[]
}
