datasource database {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Mute {
  id         String           @default(uuid()) @database.Uuid
  userId     String
  time       BigInt
  evadeTime  BigInt
  guildId    String           @unique
  moderation ModerationModule @relation(fields: [guildId], references: [id])

  @@id([userId, guildId])
}

model ModerationModule {
  id               String          @id @unique
  moduleEnabled    Boolean
  logChannel       String
  reportChannel    String
  minAccountAgeReq Int
  minAccountAgeMsg String
  mutes            Mute[]
  lockedChannels   LockedChannel[]
}

model LockedChannel {
  id         String           @unique
  time       BigInt
  guildId    String           @unique
  moderation ModerationModule @relation(fields: [guildId], references: [id])

  @@id([id, guildId])
}

model TwitterAccount {
  id      String          @id @unique
  name    String
  image   String
  follows TwitterFollow[]
}

model TwitterFollow {
  id            String             @default(uuid()) @database.Uuid
  message       String
  webhookId     String
  webhookToken  String
  accountId     String             @unique
  account       TwitterAccount     @relation(fields: [accountId], references: [id])
  guildId       String             @unique
  notifications NotificationModule @relation(fields: [guildId], references: [id])

  @@id([accountId, guildId])
}

model YoutubeChannel {
  id            String                @id @unique
  name          String
  image         String
  subscriptions YoutubeSubscription[]
}

model YoutubeSubscription {
  id            String             @default(uuid()) @database.Uuid
  message       String
  webhookId     String
  webhookToken  String
  channelId     String             @unique
  channel       YoutubeChannel     @relation(fields: [channelId], references: [id])
  guildId       String             @unique
  notifications NotificationModule @relation(fields: [guildId], references: [id])

  @@id([channelId, guildId])
}

model NotificationModule {
  id            String                @id @unique
  moduleEnabled Boolean
  twitter       TwitterFollow[]
  youtube       YoutubeSubscription[]
  twitch        TwitchFollow[]
}

model TwitchFollow {
  id            String             @default(uuid()) @database.Uuid
  message       String
  webhookId     String
  webhookToken  String
  channelId     String             @unique
  channel       TwitchChannel      @relation(fields: [channelId], references: [id])
  guildId       String             @unique
  notifications NotificationModule @relation(fields: [guildId], references: [id])

  @@id([channelId, guildId])
}

model TwitchChannel {
  id      String         @id @unique
  name    String
  image   String
  follows TwitchFollow[]
}

model TwitchStream {
  id         String   @id @unique
  title      String
  messageIds String[]
}

model YoutubeStream {
  id         String   @id @unique
  title      String
  messageIds String[]
}

model PollUser {
  id     String @unique
  option Int
  pollId String @unique
  poll   Poll   @relation(fields: [pollId], references: [id])

  @@id([id, pollId])
}

model Poll {
  id      String        @unique
  channel String
  time    BigInt
  options String[]
  users   PollUser[]
  guildId String        @unique
  utility UtilityModule @relation(fields: [guildId], references: [id])

  @@id([id, guildId])
}

model UtilityModule {
  id            String  @id @unique
  moduleEnabled Boolean
  events        Event[]
  polls         Poll[]
}

model EventUser {
  id          String  @unique
  name        String
  partnerId   String? @unique
  partnerName String?
  eventId     String  @unique
  event       Event   @relation(fields: [eventId], references: [id])

  @@id([id, eventId])
}

model Event {
  id         String        @unique
  channel    String
  locked     Boolean
  isActive   Boolean
  pinMsg     String?
  scheduleId String?
  role       String?
  queue      EventUser[]
  guildId    String        @unique
  utility    UtilityModule @relation(fields: [guildId], references: [id])

  @@id([id, guildId])
}

model WelcomeModule {
  id              String  @id @unique
  moduleEnabled   Boolean
  messagesEnabled Boolean
  channel         String
  message         String
  title           String
  description     String
  image           String
  color           String
}

model Guild {
  id          String   @id @unique
  staffRoles  String[]
  botManagers String[]
  createdAt   DateTime @default(now())
}
