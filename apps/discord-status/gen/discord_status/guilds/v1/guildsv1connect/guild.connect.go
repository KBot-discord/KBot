// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: discord_status/guilds/v1/guild.proto

package guildsv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/kbot-discord/kbot/apps/discord-status/gen/discord_status/guilds/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GuildServiceName is the fully-qualified name of the GuildService service.
	GuildServiceName = "discord_status.guilds.v1.GuildService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GuildServiceGetGuildProcedure is the fully-qualified name of the GuildService's GetGuild RPC.
	GuildServiceGetGuildProcedure = "/discord_status.guilds.v1.GuildService/GetGuild"
	// GuildServiceCreateGuildProcedure is the fully-qualified name of the GuildService's CreateGuild
	// RPC.
	GuildServiceCreateGuildProcedure = "/discord_status.guilds.v1.GuildService/CreateGuild"
	// GuildServiceDeleteGuildProcedure is the fully-qualified name of the GuildService's DeleteGuild
	// RPC.
	GuildServiceDeleteGuildProcedure = "/discord_status.guilds.v1.GuildService/DeleteGuild"
)

// GuildServiceClient is a client for the discord_status.guilds.v1.GuildService service.
type GuildServiceClient interface {
	GetGuild(context.Context, *connect_go.Request[v1.GetGuildRequest]) (*connect_go.Response[v1.GetGuildResponse], error)
	CreateGuild(context.Context, *connect_go.Request[v1.CreateGuildRequest]) (*connect_go.Response[v1.CreateGuildResponse], error)
	DeleteGuild(context.Context, *connect_go.Request[v1.DeleteGuildRequest]) (*connect_go.Response[v1.DeleteGuildResponse], error)
}

// NewGuildServiceClient constructs a client for the discord_status.guilds.v1.GuildService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGuildServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GuildServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &guildServiceClient{
		getGuild: connect_go.NewClient[v1.GetGuildRequest, v1.GetGuildResponse](
			httpClient,
			baseURL+GuildServiceGetGuildProcedure,
			opts...,
		),
		createGuild: connect_go.NewClient[v1.CreateGuildRequest, v1.CreateGuildResponse](
			httpClient,
			baseURL+GuildServiceCreateGuildProcedure,
			opts...,
		),
		deleteGuild: connect_go.NewClient[v1.DeleteGuildRequest, v1.DeleteGuildResponse](
			httpClient,
			baseURL+GuildServiceDeleteGuildProcedure,
			opts...,
		),
	}
}

// guildServiceClient implements GuildServiceClient.
type guildServiceClient struct {
	getGuild    *connect_go.Client[v1.GetGuildRequest, v1.GetGuildResponse]
	createGuild *connect_go.Client[v1.CreateGuildRequest, v1.CreateGuildResponse]
	deleteGuild *connect_go.Client[v1.DeleteGuildRequest, v1.DeleteGuildResponse]
}

// GetGuild calls discord_status.guilds.v1.GuildService.GetGuild.
func (c *guildServiceClient) GetGuild(ctx context.Context, req *connect_go.Request[v1.GetGuildRequest]) (*connect_go.Response[v1.GetGuildResponse], error) {
	return c.getGuild.CallUnary(ctx, req)
}

// CreateGuild calls discord_status.guilds.v1.GuildService.CreateGuild.
func (c *guildServiceClient) CreateGuild(ctx context.Context, req *connect_go.Request[v1.CreateGuildRequest]) (*connect_go.Response[v1.CreateGuildResponse], error) {
	return c.createGuild.CallUnary(ctx, req)
}

// DeleteGuild calls discord_status.guilds.v1.GuildService.DeleteGuild.
func (c *guildServiceClient) DeleteGuild(ctx context.Context, req *connect_go.Request[v1.DeleteGuildRequest]) (*connect_go.Response[v1.DeleteGuildResponse], error) {
	return c.deleteGuild.CallUnary(ctx, req)
}

// GuildServiceHandler is an implementation of the discord_status.guilds.v1.GuildService service.
type GuildServiceHandler interface {
	GetGuild(context.Context, *connect_go.Request[v1.GetGuildRequest]) (*connect_go.Response[v1.GetGuildResponse], error)
	CreateGuild(context.Context, *connect_go.Request[v1.CreateGuildRequest]) (*connect_go.Response[v1.CreateGuildResponse], error)
	DeleteGuild(context.Context, *connect_go.Request[v1.DeleteGuildRequest]) (*connect_go.Response[v1.DeleteGuildResponse], error)
}

// NewGuildServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGuildServiceHandler(svc GuildServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(GuildServiceGetGuildProcedure, connect_go.NewUnaryHandler(
		GuildServiceGetGuildProcedure,
		svc.GetGuild,
		opts...,
	))
	mux.Handle(GuildServiceCreateGuildProcedure, connect_go.NewUnaryHandler(
		GuildServiceCreateGuildProcedure,
		svc.CreateGuild,
		opts...,
	))
	mux.Handle(GuildServiceDeleteGuildProcedure, connect_go.NewUnaryHandler(
		GuildServiceDeleteGuildProcedure,
		svc.DeleteGuild,
		opts...,
	))
	return "/discord_status.guilds.v1.GuildService/", mux
}

// UnimplementedGuildServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGuildServiceHandler struct{}

func (UnimplementedGuildServiceHandler) GetGuild(context.Context, *connect_go.Request[v1.GetGuildRequest]) (*connect_go.Response[v1.GetGuildResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("discord_status.guilds.v1.GuildService.GetGuild is not implemented"))
}

func (UnimplementedGuildServiceHandler) CreateGuild(context.Context, *connect_go.Request[v1.CreateGuildRequest]) (*connect_go.Response[v1.CreateGuildResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("discord_status.guilds.v1.GuildService.CreateGuild is not implemented"))
}

func (UnimplementedGuildServiceHandler) DeleteGuild(context.Context, *connect_go.Request[v1.DeleteGuildRequest]) (*connect_go.Response[v1.DeleteGuildResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("discord_status.guilds.v1.GuildService.DeleteGuild is not implemented"))
}
