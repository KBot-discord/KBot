datasource database {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  output          = "./generated"
  previewFeatures = ["tracing"]
}

enum FeatureFlags {
  UNDEFINED
  DEV
  BETA
}

enum ModerationActionType {
  UNDEFINED
  BAN
  KICK
  MUTE
  TIMEOUT
  UNBAN
  UNMUTE
  UNTIMEOUT
}

enum VideoStatus {
  NONE
  NEW
  LIVE
  UPCOMING
  PAST
  MISSING
}

model KaraokeUser {
  id           String       @id
  name         String
  partnerId    String?
  partnerName  String?
  createdAt    DateTime     @default(now())
  eventId      String
  karaokeEvent KaraokeEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([id, eventId])
}

model KaraokeEvent {
  id             String        @id @unique
  textChannelId  String
  locked         Boolean
  isActive       Boolean
  pinMessageId   String?
  discordEventId String?
  roleId         String?
  queue          KaraokeUser[]
  guildId        String        @unique
  eventSettings  EventSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model EventSettings {
  guildId       String         @id @unique
  enabled       Boolean        @default(false)
  karaokeEvents KaraokeEvent[]
  coreSettings  CoreSettings   @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model Mute {
  id                 String             @default(uuid()) @database.Uuid
  userId             String
  duration           BigInt?
  evadeTime          BigInt?
  guildId            String
  moderationSettings ModerationSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  @@id([id])
  @@unique([userId, guildId])
}

model LockedChannel {
  id                 String             @id @unique
  roleId             String
  duration           BigInt?
  oldValue           Boolean?
  guildId            String             @unique
  moderationSettings ModerationSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model ModerationCase {
  id                 String               @default(uuid()) @database.Uuid
  caseId             Int
  userId             String
  userTag            String
  moderatorId        String
  moderatorTag       String
  type               ModerationActionType
  reason             String               @default("No reason provided.")
  duration           BigInt?
  guildId            String
  moderationSettings ModerationSettings   @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  @@id([id])
  @@unique([caseId, guildId])
}

model ModerationSettings {
  guildId              String           @id @unique
  enabled              Boolean          @default(false)
  logChannelId         String?
  reportChannelId      String?
  muteRoleId           String?
  minAccountAgeEnabled Boolean          @default(false)
  minAccountAgeReq     Int?
  minAccountAgeMsg     String?
  antiHoistEnabled     Boolean          @default(false)
  lockedChannels       LockedChannel[]
  moderationCases      ModerationCase[]
  mutes                Mute[]
  coreSettings         CoreSettings     @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model TwitchAccount {
  id                   String               @id @unique
  name                 String
  image                String
  twitchSubscriptionId String
  subscriptions        TwitchSubscription[]
}

model TwitchSubscription {
  id               String         @default(uuid()) @database.Uuid
  message          String?
  roleId           String?
  discordChannelId String?
  accountId        String
  account          TwitchAccount  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  guildId          String         @unique
  twitchSettings   TwitchSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  @@id([id])
  @@unique([guildId, accountId])
}

model TwitchSettings {
  guildId      String               @id @unique
  enabled      Boolean              @default(false)
  twitch       TwitchSubscription[]
  coreSettings CoreSettings         @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model Poll {
  id              String          @unique
  title           String
  channelId       String
  creator         String
  time            BigInt?
  options         String[]
  createdAt       DateTime        @default(now())
  guildId         String
  utilitySettings UtilitySettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  @@id([id, guildId])
}

model UtilitySettings {
  guildId           String       @id @unique
  enabled           Boolean      @default(false)
  incidentChannelId String?      @unique
  creditsChannelId  String?
  polls             Poll[]
  coreSettings      CoreSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model WelcomeSettings {
  guildId      String       @id @unique
  enabled      Boolean      @default(false)
  channelId    String?
  message      String?
  title        String?
  description  String?
  image        String?
  color        String?
  coreSettings CoreSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model YoutubeMessage {
  id               String              @id @unique
  discordChannelId String
  videoId          String              @unique
  video            YoutubeVideo        @relation(fields: [videoId], references: [id], onDelete: Cascade)
  subscriptionId   String              @unique @default(uuid()) @database.Uuid
  subscription     YoutubeSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model YoutubeVideo {
  id                 String           @id @unique
  title              String
  thumbnail          String
  status             VideoStatus
  scheduledStartTime DateTime?
  actualStartTime    DateTime?
  actualEndTime      DateTime?
  messages           YoutubeMessage[]
  channelId          String
  channel            YoutubeChannel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  updatedAt          DateTime         @updatedAt
}

model YoutubeChannel {
  id            String                @id @unique
  name          String
  image         String
  subscriptions YoutubeSubscription[]
  streams       YoutubeVideo[]
}

model YoutubeSubscription {
  id               String           @default(uuid()) @database.Uuid
  message          String?
  roleId           String?
  discordChannelId String?
  messages         YoutubeMessage[]
  channelId        String
  channel          YoutubeChannel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  guildId          String           @unique
  youtubeSettings  YoutubeSettings  @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  @@id([id])
  @@unique([channelId, guildId])
}

model YoutubeSettings {
  guildId      String                @id @unique
  enabled      Boolean               @default(false)
  youtube      YoutubeSubscription[]
  coreSettings CoreSettings          @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model CoreSettings {
  guildId            String              @id @unique
  flags              FeatureFlags[]
  eventSettings      EventSettings?
  moderationSettings ModerationSettings?
  twitchSettings     TwitchSettings?
  utilitySettings    UtilitySettings?
  welcomeSettings    WelcomeSettings?
  youtubeSettings    YoutubeSettings?
}

model IncidentMessage {
  id         String          @unique
  channelId  String
  guildId    String
  incidentId String          @unique
  incident   DiscordIncident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
}

model DiscordIncident {
  id        String            @id @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  resolved  Boolean
  messages  IncidentMessage[]
}
