datasource database {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum FeatureFlags {
  UNDEFINED
  DEV
  BETA
}

model Blacklist {
  guildId String @id @unique
}

model KaraokeUser {
  id           String       @id
  name         String
  partnerId    String?
  partnerName  String?
  createdAt    DateTime     @default(now())
  eventId      String
  karaokeEvent KaraokeEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([id, eventId])
}

model KaraokeEvent {
  id             String        @id @unique
  textChannelId  String
  locked         Boolean
  isActive       Boolean
  pinMessageId   String?
  discordEventId String?
  roleId         String?
  queue          KaraokeUser[]
  guildId        String        @unique
  eventSettings  EventSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model EventSettings {
  guildId       String         @id @unique
  enabled       Boolean        @default(false)
  karaokeEvents KaraokeEvent[]
  coreSettings  CoreSettings   @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model ModerationSettings {
  guildId              String       @id @unique
  enabled              Boolean      @default(false)
  reportChannelId      String?
  minAccountAgeEnabled Boolean      @default(false)
  minAccountAgeReq     Int?
  minAccountAgeMsg     String?
  antiHoistEnabled     Boolean      @default(false)
  coreSettings         CoreSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model Poll {
  id              String          @unique
  title           String
  channelId       String
  creator         String
  time            BigInt?
  options         String[]
  createdAt       DateTime        @default(now())
  guildId         String
  utilitySettings UtilitySettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  @@id([id, guildId])
}

model UtilitySettings {
  guildId           String       @id @unique
  enabled           Boolean      @default(false)
  incidentChannelId String?      @unique
  creditsChannelId  String?
  polls             Poll[]
  coreSettings      CoreSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model WelcomeSettings {
  guildId      String       @id @unique
  enabled      Boolean      @default(false)
  channelId    String?
  message      String?
  title        String?
  description  String?
  image        String?
  color        String?
  coreSettings CoreSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model HolodexChannel {
  youtubeId            String                @id @unique
  twitchId             String?               @unique
  name                 String
  englishName          String?
  image                String?
  twitchSubscriptionId String?
  youtubeSubscriptions YoutubeSubscription[]
}

model YoutubeSubscription {
  id                     String          @default(uuid()) @database.Uuid
  message                String?
  roleId                 String?
  discordChannelId       String?
  memberRoleId           String?
  memberDiscordChannelId String?
  channelId              String
  channel                HolodexChannel  @relation(fields: [channelId], references: [youtubeId], onDelete: Cascade)
  guildId                String
  youtubeSettings        YoutubeSettings @relation(fields: [guildId], references: [guildId], onDelete: Cascade)

  @@id([id])
  @@unique([channelId, guildId])
}

model YoutubeSettings {
  guildId               String                @id @unique
  enabled               Boolean               @default(false)
  reactionRoleMessageId String?
  reactionRoleChannelId String?
  youtube               YoutubeSubscription[]
  coreSettings          CoreSettings          @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model CoreSettings {
  guildId            String              @id @unique
  flags              FeatureFlags[]
  eventSettings      EventSettings?
  moderationSettings ModerationSettings?
  utilitySettings    UtilitySettings?
  welcomeSettings    WelcomeSettings?
  youtubeSettings    YoutubeSettings?
}

model TwitchConflict {
  channelId String @id @unique
}

model IncidentMessage {
  id         String          @unique
  channelId  String
  guildId    String
  incidentId String          @unique
  incident   DiscordIncident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
}

model DiscordIncident {
  id        String            @id @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  resolved  Boolean
  messages  IncidentMessage[]
}
